<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="oktaStateToken" elementType="Cookie" testname="oktaStateToken">
            <stringProp name="Cookie.value">${decoded_state_token}</stringProp>
            <stringProp name="Cookie.domain"></stringProp>
            <stringProp name="Cookie.path"></stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="APP_URL" elementType="Argument">
            <stringProp name="Argument.name">APP_URL</stringProp>
            <stringProp name="Argument.value">com.oktapreview.sproutabout</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTH_URL" elementType="Argument">
            <stringProp name="Argument.name">AUTH_URL</stringProp>
            <stringProp name="Argument.value">login-staging.sproutabout.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">0oa146zn6l1bASZI71d7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">lguardianuserstaging2@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">!Password1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GRAPHQL_URL" elementType="Argument">
            <stringProp name="Argument.name">GRAPHQL_URL</stringProp>
            <stringProp name="Argument.value">staging.sproutabout.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ContactId" elementType="Argument">
            <stringProp name="Argument.name">ContactId</stringProp>
            <stringProp name="Argument.value">\&quot;0D22939D-D158-EC11-94F6-14CB65211666\&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">\&quot;3D485CCA-E84C-EC11-9820-501AC5358CAE\&quot;</stringProp>
          </elementProp>
          <elementProp name="BulletinId" elementType="Argument">
            <stringProp name="Argument.name">BulletinId</stringProp>
            <stringProp name="Argument.value">62553d5cfd4ec1624c81f091</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="recipientId" elementType="Argument">
            <stringProp name="Argument.name">recipientId</stringProp>
            <stringProp name="Argument.value">EA55C2C8-E74C-EC11-9820-501AC5358CAE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="childNoteId" elementType="Argument">
            <stringProp name="Argument.name">childNoteId</stringProp>
            <stringProp name="Argument.value">F06208F6-4474-EC11-94F6-281878B37BDE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time" elementType="Argument">
            <stringProp name="Argument.name">time</stringProp>
            <stringProp name="Argument.value">2022-06-14T13:45:18.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endTime" elementType="Argument">
            <stringProp name="Argument.name">endTime</stringProp>
            <stringProp name="Argument.value">2022-06-16T13:04:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="TestPlan.comments">C:\Users\azureuser\Desktop\Performance_Testing\Results\Results_HTML\22_06_22\Staff_AllPost_600_40_1_distributed1.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authorize ${__threadNum}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">grant_type=client_credentials&amp;scope=m2m-admin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${AUTH_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/oauth2/default/v1/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:\&quot;(.*)\&quot;,&quot;s</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Basic MG9hMmMyZWIwcEg1MUtpeXcxZDc6VER4ckc4WXc5ZFk2VTY4LWpzZHVxWmtnUkphUW5xTDFOUUVXM0Etag==</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">cache-control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Introspect Call ${__threadNum}" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;stateToken&quot;:&quot;${decoded_state_token}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${AUTH_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/v1/authn/introspect</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login ${__threadNum}" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;password&quot;:&quot;${PASSWORD}&quot;,&quot;username&quot;:&quot;${USERNAME}&quot;,&quot;options&quot;:{&quot;warnBeforePasswordExpired&quot;:true,&quot;multiOptionalFactorEnroll&quot;:true},&quot;stateToken&quot;:&quot;${decoded_state_token}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${AUTH_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/v1/authn</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">JSESSIONID</stringProp>
            <stringProp name="RegexExtractor.regex">JSESSIONID=(.*)\; P</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Up MFA ${__threadNum}" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="stateToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${decoded_state_token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">stateToken</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${AUTH_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">login/step-up/redirect</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">close</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">code</stringProp>
            <stringProp name="RegexExtractor.regex">code=(.*)&amp;state</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="50549">302</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="JSESSIONID" elementType="Cookie" testname="JSESSIONID">
              <stringProp name="Cookie.value">${JSESSIONID}</stringProp>
              <stringProp name="Cookie.domain"></stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">true</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="oktaStateToken" elementType="Cookie" testname="oktaStateToken">
              <stringProp name="Cookie.value">${decoded_state_token}</stringProp>
              <stringProp name="Cookie.domain"></stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">true</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="t" elementType="Cookie" testname="t">
              <stringProp name="Cookie.value">default</stringProp>
              <stringProp name="Cookie.domain"></stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">true</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="DT" elementType="Cookie" testname="DT">
              <stringProp name="Cookie.value">${DT_COOKIE}</stringProp>
              <stringProp name="Cookie.domain"></stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">true</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Tokens ${__threadNum}" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">code=${code}&amp;code_verifier=eb9f29168f4ece4ee3231728fbeb37461a382ae4ed6&amp;redirect_uri=com.oktapreview.sproutabout%3A%2Flogin&amp;client_id=0oaro22l5x3mdhluP1d6&amp;grant_type=authorization_code</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${AUTH_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">oauth2/default/v1/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.*)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Refresh Token ${__threadNum}" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="refresh_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${refresh_token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">refresh_token</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">refresh_token</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${AUTH_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">oauth2/default/v1/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.*)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(var,${access_token})}
${__setProperty(myRefreshToken,${refresh_token})}
${__setProperty(currDate,Date.now())}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">def StartTime = new Date() 
use(groovy.time.TimeCategory) {
    vars.put(&quot;StartTime&quot;, StartTime.getTime() as String)


    println(&quot;***************************************************************&quot;)
    println(&quot;________StartTime.getTime()_________&quot;+StartTime.getTime())
    println(&quot;________StartTime_________&quot;+vars.get(&apos;StartTime&apos;))
    println(&quot;***************************************************************&quot;)
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(var,${access_token})}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Staff-All Staff Post APIs" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">MVP500_StaffTestData1.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">Staff_Data_Distributed.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Get User Info - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUserInfo&quot;,&quot;query&quot;:&quot;query getUserInfo {\n  getUserInfo {\n    ContactId\n    StaffId\n    Email\n    FirstName\n    FirstLoginDate\n    LastName\n    PhotoUrl\n    TwilioId\n    UserType\n    Role\n    AcceptedTerms\n    Schools {\n      SchoolId\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">getUserInfo</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getUserInfo {
  getUserInfo {
    ContactId
    StaffId
    Email
    FirstName
    FirstLoginDate
    LastName
    PhotoUrl
    TwilioId
    UserType
    Role
    AcceptedTerms
    Schools {
      SchoolId
      __typename
    }
    __typename
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - CurrentStaffId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">CurrentStaffId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserInfo.StaffId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-288062171">{&quot;data&quot;:{&quot;getUserInfo&quot;:{&quot;ContactId&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Find All Divisions - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findAllDivisions&quot;,&quot;query&quot;:&quot;query findAllDivisions {\n  findAllDivisions(StaffId: \&quot;${CurrentStaffId}\&quot;) {\n    DivisionName\n    DivisionId\n    HasAccess\n    Region {\n      RegionName\n      RegionId\n      HasAccess\n      District {\n        DistrictName\n        DistrictId\n        HasAccess\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">findAllDivisions</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query findAllDivisions {
  findAllDivisions(StaffId: &quot;${CurrentStaffId}&quot;) {
    DivisionName
    DivisionId
    HasAccess
    Region {
      RegionName
      RegionId
      HasAccess
      District {
        DistrictName
        DistrictId
        HasAccess
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1776804346">{&quot;data&quot;:{&quot;findAllDivisions&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Find All Classes By School - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findAllClassesBySchool&quot;,&quot;query&quot;:&quot;query findAllClassesBySchool {\n  findAllClassesBySchool(SchoolId: \&quot;${SchoolId}\&quot;) {\n    SchoolId\n    ExternalSchoolId\n    ClassId\n    ExternalClassId\n    ClassName\n    ChildCount\n    __typename\n    ClassSequenceNumber\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">findAllClassesBySchool</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query findAllClassesBySchool {
  findAllClassesBySchool(SchoolId: &quot;${SchoolId}&quot;) {
    SchoolId
    ExternalSchoolId
    ClassId
    ExternalClassId
    ClassName
    ChildCount
    __typename
    ClassSequenceNumber
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">ClassId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.findAllClassesBySchool[1].ClassId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1756207313">{&quot;data&quot;:{&quot;findAllClassesBySchool&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - List Staff Class - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;listStaffClass&quot;,&quot;variables&quot;:{&quot;staffId&quot;:&quot;${StaffId}&quot;},&quot;query&quot;:&quot;query listStaffClass($staffId: String!) {\n  listStaffClass(ListStaffClassDto: {StaffId: $staffId}) {\n    StaffId\n    StaffClassId\n    FirstName\n    ClassId\n    ClassName\n    LastName\n    CheckInDateTime\n    CheckOutDateTime\n    __typename\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">listStaffClass</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query listStaffClass($staffId: String!) {
  listStaffClass(ListStaffClassDto: {StaffId: $staffId}) {
    StaffId
    StaffClassId
    FirstName
    ClassId
    ClassName
    LastName
    CheckInDateTime
    CheckOutDateTime
    __typename
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{&quot;staffId&quot;:&quot;${StaffId}&quot;}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1614114974">{&quot;data&quot;:{&quot;listStaffClass&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkInClassId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.listStaffClass[?(@.CheckOutDateTime== null)].StaffClassId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">String checkInClassId = new String(vars.get(&quot;checkInClassId&quot;));
log.info(&quot;************&quot;+checkInClassId);
vars.put(&quot;checkInClassId&quot;,checkInClassId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If staff already checkedIn" enabled="true">
            <stringProp name="IfController.condition">${__groovy((vars.get(&quot;checkInClassId&quot;))  != &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL -CheckOutAlreadyCheckedInStaff" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;checkOutStaff&quot;,&quot;variables&quot;:{&quot;staffClassId&quot;:&quot;${checkInClassId}&quot;},&quot;query&quot;:&quot;mutation checkOutStaff($staffClassId: String!) {\n  checkOutStaff(StaffClassId: $staffClassId) {\n    StaffClassId\n    StaffId\n    ClassId\n    CheckInDateTime\n    CheckOutDateTime\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">checkOutStaff</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation checkOutStaff($staffClassId: String!) {
  checkOutStaff(StaffClassId: $staffClassId) {
    StaffClassId
    StaffId
    ClassId
    CheckInDateTime
    CheckOutDateTime
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;staffClassId&quot;:&quot;${checkInClassId}&quot;}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="beanstalkid" elementType="Header">
                    <stringProp name="Header.name">beanstalkid</stringProp>
                    <stringProp name="Header.value">3CB2CC36-646F-EC11-94F6-501AC51FD712</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-188171998">{&quot;data&quot;:{&quot;checkOutStaff&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Check In Staff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;checkInStaff&quot;,&quot;variables&quot;:{&quot;staffId&quot;:&quot;${StaffId}&quot;,&quot;classId&quot;:&quot;${ClassId}&quot;},&quot;query&quot;:&quot;mutation checkInStaff($staffId: String!, $classId: String!) {\n  checkInStaff(checkInStaffDto: {ClassId: $classId, StaffId: $staffId}) {\n    StaffClassId\n    StaffId\n    ClassId\n    CheckInDateTime\n    CheckOutDateTime\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">checkInStaff</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation checkInStaff($staffId: String!, $classId: String!) {
  checkInStaff(checkInStaffDto: {ClassId: $classId, StaffId: $staffId}) {
    StaffClassId
    StaffId
    ClassId
    CheckInDateTime
    CheckOutDateTime
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;staffId&quot;:&quot;${StaffId}&quot;,&quot;classId&quot;:&quot;${ClassId}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments"> - ${__threadNum}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - StaffClassId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">StaffClassId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.checkInStaff.StaffClassId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="TestPlan.comments">$.data[?(@.backgroundImage != null &amp;&amp; @.backgroundImage != &quot;&quot;)].backgroundImage</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - CheckedInStaffId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CheckedInStaffId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.checkInStaff.StaffId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="beanstalkid" elementType="Header">
                  <stringProp name="Header.name">beanstalkid</stringProp>
                  <stringProp name="Header.value">F4A068D7-E74C-EC11-9820-501AC5358CAE</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1457619397">{&quot;data&quot;:{&quot;checkInStaff&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">100.0</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - CheckedinStaffId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">CheckedInStaffId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..CheckedInStaffId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Run Only if Staff is checkedin" enabled="true">
            <stringProp name="IfController.condition">${__groovy((vars.get(&quot;CheckedInStaffId&quot;))!= &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="TestPlan.comments">StaffClassId != null &amp;&amp; @.StaffClassId != &quot;&quot;</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Find One Child Attendance - HTTP Request " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findOneChildAttendance&quot;,&quot;variables&quot;:{&quot;childId&quot;:&quot;${ChildId}&quot;},&quot;query&quot;:&quot;query findOneChildAttendance($childId: String!) {\n  findOneChildAttendance(ChildId: $childId) {\n    ChildAttendanceId\n    ChildId\n    ClassId\n    CheckInDateTime\n    CheckOutDateTime\n    CheckInById\n    CheckOutById\n    CheckInById\n    CheckOutById\n    CreatedBy\n    UpdatedBy\n    CreatedDate\n    UpdatedDate\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">findOneChildAttendance</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query findOneChildAttendance($childId: String!) {
  findOneChildAttendance(ChildId: $childId) {
    ChildAttendanceId
    ChildId
    ClassId
    CheckInDateTime
    CheckOutDateTime
    CheckInById
    CheckOutById
    CheckInById
    CheckOutById
    CreatedBy
    UpdatedBy
    CreatedDate
    UpdatedDate
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;childId&quot;:&quot;${ChildId}&quot;}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="beanstalkid" elementType="Header">
                    <stringProp name="Header.name">beanstalkid</stringProp>
                    <stringProp name="Header.value">F4A068D7-E74C-EC11-9820-501AC5358CAE</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor-ChildAttendanceId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ChildAttendanceId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.findOneChildAttendance[?(@.CheckOutDateTime== null)].ChildAttendanceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String ChildAttendanceId = new String(vars.get(&quot;ChildAttendanceId&quot;));
log.info(&quot;************&quot;+ChildAttendanceId);
vars.put(&quot;ChildAttendanceId&quot;,ChildAttendanceId);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="792600032">{&quot;data&quot;:{&quot;findOneChildAttendance&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If child is already checkedIn" enabled="true">
              <stringProp name="IfController.condition">${__groovy((vars.get(&quot;ChildAttendanceId&quot;))  != &quot;&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL -CheckOutAlreadyCheckedInChild " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;checkOutChild&quot;,&quot;variables&quot;:{&quot;childAttendanceId&quot;:&quot;${ChildAttendanceId}&quot;,&quot;staffId&quot;:&quot;${StaffId}&quot;},&quot;query&quot;:&quot;mutation checkOutChild($childAttendanceId: String!, $staffId: String!) {\n  checkOutChild(ChildAttendanceId: $childAttendanceId, StaffId: $staffId) {\n    ChildAttendanceId\n    ChildId\n    ClassId\n    CheckInDateTime\n    CheckOutDateTime\n    CheckInById\n    CheckOutById\n    CreatedBy\n    UpdatedBy\n    CreatedDate\n    UpdatedDate\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">checkOutChild</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation checkOutChild($childAttendanceId: String!, $staffId: String!) {
  checkOutChild(ChildAttendanceId: $childAttendanceId, StaffId: $staffId) {
    ChildAttendanceId
    ChildId
    ClassId
    CheckInDateTime
    CheckOutDateTime
    CheckInById
    CheckOutById
    CreatedBy
    UpdatedBy
    CreatedDate
    UpdatedDate
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{&quot;childAttendanceId&quot;:&quot;${ChildAttendanceId}&quot;,&quot;staffId&quot;:&quot;${StaffId}&quot;}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="beanstalkid" elementType="Header">
                      <stringProp name="Header.name">beanstalkid</stringProp>
                      <stringProp name="Header.value">3CB2CC36-646F-EC11-94F6-501AC51FD712</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1839313826">{&quot;data&quot;:{&quot;checkOutChild&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Check In Child" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;checkInChild&quot;,&quot;variables&quot;:{&quot;childId&quot;:&quot;${ChildId}&quot;,&quot;classId&quot;:&quot;${ClassId}&quot;,&quot;staffId&quot;:&quot;${CheckedInStaffId}&quot;},&quot;query&quot;:&quot;mutation checkInChild($childId: String!, $classId: String!, $staffId: String!) {\n  checkInChild(\n    createChildClassDto: {ClassId: $classId, ChildId: $childId, StaffId: $staffId}\n  ) {\n    ChildAttendanceId\n    ChildId\n    ClassId\n    CheckInDateTime\n    CheckOutDateTime\n    CheckInById\n    CheckOutById\n    CreatedBy\n    UpdatedBy\n    CreatedDate\n    UpdatedDate\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">checkInChild</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation checkInChild($childId: String!, $classId: String!, $staffId: String!) {
  checkInChild(
    createChildClassDto: {ClassId: $classId, ChildId: $childId, StaffId: $staffId}
  ) {
    ChildAttendanceId
    ChildId
    ClassId
    CheckInDateTime
    CheckOutDateTime
    CheckInById
    CheckOutById
    CreatedBy
    UpdatedBy
    CreatedDate
    UpdatedDate
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;childId&quot;:&quot;${ChildId}&quot;,&quot;classId&quot;:&quot;${ClassId}&quot;,&quot;staffId&quot;:&quot;${CheckedInStaffId}&quot;}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor-ChildAttendanceId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ChildAttendanceId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..ChildAttendanceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor-CheckedInChildId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CheckedInChildId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..ChildId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1186206071">{&quot;data&quot;:{&quot;checkInChild&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">300</stringProp>
              </ConstantTimer>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">100.0</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Run Only if Child is checkedin" enabled="true">
              <stringProp name="IfController.condition">${__groovy((vars.get(&quot;CheckedInChildId&quot;))!= &quot;&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL-CreatePost - Activity" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createPost&quot;,&quot;variables&quot;:{&quot;post&quot;:{&quot;ChildIds&quot;:[&quot;${ChildId}&quot;],&quot;PostedBy&quot;:&quot;${StaffId}&quot;,&quot;ClassId&quot;:&quot;${ClassId}&quot;,&quot;SchoolId&quot;:&quot;${SchoolId}&quot;,&quot;PostType&quot;:&quot;Activity&quot;,&quot;Text&quot;:&quot;Check this out!&quot;,&quot;Media&quot;:[],&quot;EducationalTags&quot;:{&quot;AgeGroup&quot;:&quot;Non-Mobile Infants&quot;}}},&quot;query&quot;:&quot;mutation createPost($post: CreatePostDto!) {\ncreatePost(createPostDto: $post) {\nPostedBy\nChildId\n_id\nRelatedPostId\nSchoolId\nPostedDate\nClassId\nPostType\nPostDetails {\n... on SleepPostDetail {\nSleepStartTime\nSleepEndTime\n__typename\n}\n... on FoodPostDetail {\nFood\nDrinkOffered\nAmount\nMealTime\nMealType\nMealNote\nGeneralComment\n__typename\n}\n... on PottyPostDetail {\nPottyType {\nType\nBMType\n__typename\n}\nPottyTime\nWokeUpWet\nDiaperRash\nAppliedDiaperCream\n__typename\n}\n__typename\n}\n__typename\n}\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">createPost</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation createPost($post: CreatePostDto!) {
createPost(createPostDto: $post) {
PostedBy
ChildId
_id
RelatedPostId
SchoolId
PostedDate
ClassId
PostType
PostDetails {
... on SleepPostDetail {
SleepStartTime
SleepEndTime
__typename
}
... on FoodPostDetail {
Food
DrinkOffered
Amount
MealTime
MealType
MealNote
GeneralComment
__typename
}
... on PottyPostDetail {
PottyType {
Type
BMType
__typename
}
PottyTime
WokeUpWet
DiaperRash
AppliedDiaperCream
__typename
}
__typename
}
__typename
}
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">        {&quot;post&quot;:
        {&quot;ChildIds&quot;:[&quot;${ChildId}&quot;],
      
        &quot;PostedBy&quot;:&quot;${StaffId}&quot;,
        &quot;ClassId&quot;:&quot;${ClassId}&quot;,      
        &quot;SchoolId&quot;:&quot;${SchoolId}&quot;,
        &quot;PostType&quot;:&quot;Activity&quot;,
        &quot;Text&quot;:&quot;Check this out!&quot;,
        &quot;Media&quot;:[],
        &quot;EducationalTags&quot;:{&quot;AgeGroup&quot;:&quot;Non-Mobile Infants&quot;}}}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="872529188">{&quot;data&quot;:{&quot;createPost&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL-CreatePost Potty Feed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createPost&quot;,&quot;variables&quot;:{&quot;post&quot;:{&quot;ChildIds&quot;:&quot;${CheckedInChildId}&quot;,&quot;ClassId&quot;:&quot;${ClassId}&quot;,&quot;SchoolId&quot;:&quot;${SchoolId}&quot;,&quot;PostType&quot;:&quot;Potty&quot;,&quot;Text&quot;:&quot;Was wet and had a normal BM in their diaper&quot;,&quot;PostDetails&quot;:{&quot;PottyType&quot;:{&quot;Type&quot;:&quot;BM&quot;,&quot;BMType&quot;:&quot;Normal&quot;},&quot;PottyTime&quot;:&quot;${time}&quot;,&quot;Location&quot;:&quot;Diaper&quot;,&quot;DiaperRash&quot;:false,&quot;WokeUpWet&quot;:false,&quot;SoiledClothes&quot;:true,&quot;Notes&quot;:&quot;Test&quot;},&quot;PostedBy&quot;:&quot;${CheckedInStaffId}&quot;}},&quot;query&quot;:&quot;mutation createPost ($post: CreatePostDto!) {\n  createPost(createPostDto: $post) {\n    PostedBy\n    ChildId\n    _id\n    RelatedPostId\n    SchoolId\n    PostedDate\n    ClassId\n    PostType\n    PostDetails {\n      ... on SleepPostDetail {\n        SleepStartTime\n        SleepEndTime\n        __typename\n      }\n      ... on FoodPostDetail {\n        Food\n        DrinkOffered\n        Amount\n        MealTime\n        MealType\n        __typename\n      }\n      ... on PottyPostDetail {\n        PottyType {\n          Type\n          BMType\n          __typename\n        }\n        PottyTime\n        WokeUpWet\n        DiaperRash\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">createPost</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation createPost ($post: CreatePostDto!) {
  createPost(createPostDto: $post) {
    PostedBy
    ChildId
    _id
    RelatedPostId
    SchoolId
    PostedDate
    ClassId
    PostType
    PostDetails {
      ... on SleepPostDetail {
        SleepStartTime
        SleepEndTime
        __typename
      }
      ... on FoodPostDetail {
        Food
        DrinkOffered
        Amount
        MealTime
        MealType
        __typename
      }
      ... on PottyPostDetail {
        PottyType {
          Type
          BMType
          __typename
        }
        PottyTime
        WokeUpWet
        DiaperRash
        __typename
      }
      __typename
    }
    __typename
  }
}

</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;post&quot;: {
        &quot;ChildIds&quot;: &quot;${CheckedInChildId}&quot;,
        &quot;ClassId&quot;: &quot;${ClassId}&quot;,
        &quot;SchoolId&quot;: &quot;${SchoolId}&quot;,
        &quot;PostType&quot;: &quot;Potty&quot;,
        &quot;Text&quot;:&quot;Was wet and had a normal BM in their diaper&quot;,
        &quot;PostDetails&quot;:{&quot;PottyType&quot;:{&quot;Type&quot;:&quot;BM&quot;,&quot;BMType&quot;:&quot;Normal&quot;},
        &quot;PottyTime&quot;:&quot;${time}&quot;,
        &quot;Location&quot;:&quot;Diaper&quot;,
        &quot;DiaperRash&quot;:false,
        &quot;WokeUpWet&quot;:false,
        &quot;SoiledClothes&quot;:true,&quot;Notes&quot;:&quot;Test&quot;
        },
        &quot;PostedBy&quot;: &quot;${CheckedInStaffId}&quot;
        
    }
        
  }</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="872529188">{&quot;data&quot;:{&quot;createPost&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL-CreatePost Food Feed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createPost&quot;,&quot;variables&quot;:{&quot;post&quot;:{&quot;ChildIds&quot;:&quot;${CheckedInChildId}&quot;,&quot;ClassId&quot;:&quot;${ClassId}&quot;,&quot;SchoolId&quot;:&quot;${SchoolId}&quot;,&quot;PostType&quot;:&quot;Food&quot;,&quot;Text&quot;:&quot;Ate all of their breakfast and drank 2 oz of formula&quot;,&quot;PostDetails&quot;:{&quot;MealTime&quot;:&quot;${time}&quot;,&quot;MealType&quot;:&quot;Breakfast&quot;,&quot;Food&quot;:[&quot;Apricots&quot;,&quot;Apples&quot;],&quot;Amount&quot;:&quot;All&quot;,&quot;DrinkOffered&quot;:&quot;Milk&quot;,&quot;Bottle&quot;:{&quot;Amount&quot;:&quot;2 oz&quot;,&quot;BottleType&quot;:&quot;Formula&quot;},&quot;GeneralComment&quot;:&quot;&quot;,&quot;MealNote&quot;:&quot;took a good meal in the afternoon today&quot;,&quot;AdditionalFood&quot;:[&quot;coffee&quot;]},&quot;PostedBy&quot;:&quot;${CheckedInStaffId}&quot;}},&quot;query&quot;:&quot;mutation createPost($post: CreatePostDto!) {\n  createPost(createPostDto: $post) {\n    PostedBy\n    ChildId\n    _id\n    RelatedPostId\n    SchoolId\n    PostedDate\n    ClassId\n    PostType\n    PostDetails {\n      ... on SleepPostDetail {\n        SleepStartTime\n        SleepEndTime\n        __typename\n      }\n      ... on FoodPostDetail {\n        Food\n        DrinkOffered\n        Amount\n        MealTime\n        MealType\n        __typename\n      }\n      ... on PottyPostDetail {\n        PottyType {\n          Type\n          BMType\n          __typename\n        }\n        PottyTime\n        WokeUpWet\n        DiaperRash\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">createPost</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation createPost($post: CreatePostDto!) {
  createPost(createPostDto: $post) {
    PostedBy
    ChildId
    _id
    RelatedPostId
    SchoolId
    PostedDate
    ClassId
    PostType
    PostDetails {
      ... on SleepPostDetail {
        SleepStartTime
        SleepEndTime
        __typename
      }
      ... on FoodPostDetail {
        Food
        DrinkOffered
        Amount
        MealTime
        MealType
        __typename
      }
      ... on PottyPostDetail {
        PottyType {
          Type
          BMType
          __typename
        }
        PottyTime
        WokeUpWet
        DiaperRash
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;post&quot;: {
        &quot;ChildIds&quot;: &quot;${CheckedInChildId}&quot;,
     
        &quot;ClassId&quot;: &quot;${ClassId}&quot;,
        &quot;SchoolId&quot;: &quot;${SchoolId}&quot;,
        &quot;PostType&quot;: &quot;Food&quot;,
        &quot;Text&quot;:&quot;Ate all of their breakfast and drank 2 oz of formula&quot;,
        &quot;PostDetails&quot;:{&quot;MealTime&quot;:&quot;${time}&quot;,&quot;MealType&quot;:&quot;Breakfast&quot;,&quot;Food&quot;:[&quot;Apricots&quot;,&quot;Apples&quot;],
        &quot;Amount&quot;:&quot;All&quot;,
        &quot;DrinkOffered&quot;:&quot;Milk&quot;,
        &quot;Bottle&quot;:{&quot;Amount&quot;:&quot;2 oz&quot;,&quot;BottleType&quot;:&quot;Formula&quot;},
        &quot;GeneralComment&quot;:&quot;&quot;,
        &quot;MealNote&quot;:&quot;took a good meal in the afternoon today&quot;,
        &quot;AdditionalFood&quot;:[&quot;coffee&quot;]},
        &quot;PostedBy&quot;: &quot;${CheckedInStaffId}&quot;
    }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="872529188">{&quot;data&quot;:{&quot;createPost&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL-CreatePost LessonPlan Feed" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createPost&quot;,&quot;variables&quot;:{&quot;post&quot;:{&quot;ChildIds&quot;:&quot;${CheckedInChildId}&quot;,&quot;PostedBy&quot;:&quot;${CheckedInStaffId}&quot;,&quot;ClassId&quot;:&quot;${ClassId}&quot;,&quot;SchoolId&quot;:&quot;${SchoolId}&quot;,&quot;PostType&quot;:&quot;LessonPlan&quot;,&quot;Media&quot;:[{&quot;MediaType&quot;:&quot;photo&quot;,&quot;MediaUrl&quot;:&quot;${scheme}://stqacus403789.blob.core.windows.net/qacontainer/48ff7309-d5a3-42ce-8e75-a0553c86f977&quot;}],&quot;PostDetails&quot;:{&quot;LessonPlanWeek&quot;:&quot;2022-02-08T13:45:18.000Z&quot;}}},&quot;query&quot;:&quot;mutation createPost($post: CreatePostDto!) {\n  createPost(createPostDto: $post) {\n    PostedBy\n    ChildId\n    _id\n    RelatedPostId\n    SchoolId\n    PostedDate\n    ClassId\n    PostType\n    PostDetails {\n      ... on SleepPostDetail {\n        SleepStartTime\n        SleepEndTime\n        __typename\n      }\n      ... on FoodPostDetail {\n        Food\n        DrinkOffered\n        Amount\n        MealTime\n        MealType\n        __typename\n      }\n      ... on PottyPostDetail {\n        PottyType {\n          Type\n          BMType\n          __typename\n        }\n        PottyTime\n        WokeUpWet\n        DiaperRash\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">createPost</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation createPost($post: CreatePostDto!) {
  createPost(createPostDto: $post) {
    PostedBy
    ChildId
    _id
    RelatedPostId
    SchoolId
    PostedDate
    ClassId
    PostType
    PostDetails {
      ... on SleepPostDetail {
        SleepStartTime
        SleepEndTime
        __typename
      }
      ... on FoodPostDetail {
        Food
        DrinkOffered
        Amount
        MealTime
        MealType
        __typename
      }
      ... on PottyPostDetail {
        PottyType {
          Type
          BMType
          __typename
        }
        PottyTime
        WokeUpWet
        DiaperRash
        __typename
      }
      __typename
    }
    __typename
  }
}

</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;post&quot;: {
        &quot;ChildIds&quot;: &quot;${CheckedInChildId}&quot;,
        &quot;PostedBy&quot;: &quot;${CheckedInStaffId}&quot;,
        &quot;ClassId&quot;: &quot;${ClassId}&quot;,
        &quot;SchoolId&quot;: &quot;${SchoolId}&quot;,
        &quot;PostType&quot;:&quot;LessonPlan&quot;,
        &quot;Media&quot;:[{&quot;MediaType&quot;:&quot;photo&quot;,
        &quot;MediaUrl&quot;:&quot;${scheme}://stqacus403789.blob.core.windows.net/qacontainer/48ff7309-d5a3-42ce-8e75-a0553c86f977&quot;}],
        &quot;PostDetails&quot;:{&quot;LessonPlanWeek&quot;:&quot;2022-02-08T13:45:18.000Z&quot;
        }
        }
        }</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="872529188">{&quot;data&quot;:{&quot;createPost&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL-CreatePost Sleep Feed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createPost&quot;,&quot;variables&quot;:{&quot;post&quot;:{&quot;ChildIds&quot;:&quot;${CheckedInChildId}&quot;,&quot;ClassId&quot;:&quot;${ClassId}&quot;,&quot;SchoolId&quot;:&quot;${SchoolId}&quot;,&quot;PostType&quot;:&quot;Sleep&quot;,&quot;Text&quot;:&quot;Rested from 7:48 PM to 9:48 PM and did not sleep&quot;,&quot;PostDetails&quot;:{&quot;SleepStartTime&quot;:&quot;${time}&quot;,&quot;SleepEndTime&quot;:&quot;${endTime}&quot;,&quot;RestedOnly&quot;:true},&quot;PostedBy&quot;:&quot;${CheckedInStaffId}&quot;}},&quot;query&quot;:&quot;mutation createPost ($post: CreatePostDto!) {\n  createPost(createPostDto: $post) {\n    PostedBy\n    ChildId\n    _id\n    RelatedPostId\n    SchoolId\n    PostedDate\n    ClassId\n    PostType\n    PostDetails {\n      ... on SleepPostDetail {\n        SleepStartTime\n        SleepEndTime\n        __typename\n      }\n      ... on FoodPostDetail {\n        Food\n        DrinkOffered\n        Amount\n        MealTime\n        MealType\n        __typename\n      }\n      ... on PottyPostDetail {\n        PottyType {\n          Type\n          BMType\n          __typename\n        }\n        PottyTime\n        WokeUpWet\n        DiaperRash\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">createPost</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation createPost ($post: CreatePostDto!) {
  createPost(createPostDto: $post) {
    PostedBy
    ChildId
    _id
    RelatedPostId
    SchoolId
    PostedDate
    ClassId
    PostType
    PostDetails {
      ... on SleepPostDetail {
        SleepStartTime
        SleepEndTime
        __typename
      }
      ... on FoodPostDetail {
        Food
        DrinkOffered
        Amount
        MealTime
        MealType
        __typename
      }
      ... on PottyPostDetail {
        PottyType {
          Type
          BMType
          __typename
        }
        PottyTime
        WokeUpWet
        DiaperRash
        __typename
      }
      __typename
    }
    __typename
  }
}

</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;post&quot;: {
        &quot;ChildIds&quot;: &quot;${CheckedInChildId}&quot;,
        &quot;ClassId&quot;: &quot;${ClassId}&quot;,
        &quot;SchoolId&quot;: &quot;${SchoolId}&quot;,
        &quot;PostType&quot;:&quot;Sleep&quot;,
        &quot;Text&quot;:&quot;Rested from 7:48 PM to 9:48 PM and did not sleep&quot;,
        &quot;PostDetails&quot;:{
        &quot;SleepStartTime&quot;:&quot;${time}&quot;,
        &quot;SleepEndTime&quot;:&quot;${endTime}&quot;,
        &quot;RestedOnly&quot;:true
        },
        &quot;PostedBy&quot;: &quot;${CheckedInStaffId}&quot;
        }
        }</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="872529188">{&quot;data&quot;:{&quot;createPost&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL-CreatePost  Video Update" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createPost&quot;,&quot;variables&quot;:{&quot;post&quot;:{&quot;ChildIds&quot;:&quot;${CheckedInChildId}&quot;,&quot;PostedBy&quot;:&quot;${CheckedInStaffId}&quot;,&quot;ClassId&quot;:&quot;${ClassId}&quot;,&quot;SchoolId&quot;:&quot;${SchoolId}&quot;,&quot;PostType&quot;:&quot;Activity&quot;,&quot;Text&quot;:&quot;Check this out!&quot;,&quot;Media&quot;:[{&quot;MediaType&quot;:&quot;video&quot;,&quot;MediaUrl&quot;:&quot;https://stqacus403789.blob.core.windows.net/qacontainer/70f5cd6f-7b37-4150-923f-245127a933fa&quot;}],&quot;EducationalTags&quot;:{&quot;AgeGroup&quot;:&quot;Non-Mobile Infants&quot;}}},&quot;query&quot;:&quot;mutation createPost($post: CreatePostDto!) {\n  createPost(createPostDto: $post) {\n    PostedBy\n    ChildId\n    _id\n    RelatedPostId\n    SchoolId\n    PostedDate\n    ClassId\n    PostType\n    PostDetails {\n      ... on SleepPostDetail {\n        SleepStartTime\n        SleepEndTime\n        __typename\n      }\n      ... on FoodPostDetail {\n        Food\n        DrinkOffered\n        Amount\n        MealTime\n        MealType\n        __typename\n      }\n      ... on PottyPostDetail {\n        PottyType {\n          Type\n          BMType\n          __typename\n        }\n        PottyTime\n        WokeUpWet\n        DiaperRash\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">createPost</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation createPost($post: CreatePostDto!) {
  createPost(createPostDto: $post) {
    PostedBy
    ChildId
    _id
    RelatedPostId
    SchoolId
    PostedDate
    ClassId
    PostType
    PostDetails {
      ... on SleepPostDetail {
        SleepStartTime
        SleepEndTime
        __typename
      }
      ... on FoodPostDetail {
        Food
        DrinkOffered
        Amount
        MealTime
        MealType
        __typename
      }
      ... on PottyPostDetail {
        PottyType {
          Type
          BMType
          __typename
        }
        PottyTime
        WokeUpWet
        DiaperRash
        __typename
      }
      __typename
    }
    __typename
  }
}

</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;post&quot;: {
        &quot;ChildIds&quot;: &quot;${CheckedInChildId}&quot;,
        &quot;PostedBy&quot;: &quot;${CheckedInStaffId}&quot;,
        &quot;ClassId&quot;: &quot;${ClassId}&quot;,
        &quot;SchoolId&quot;: &quot;${SchoolId}&quot;,
        &quot;PostType&quot;:&quot;Activity&quot;,
        &quot;Text&quot;:&quot;Check this out!&quot;,
        &quot;Media&quot;:[{
        	&quot;MediaType&quot;:&quot;video&quot;,
        	&quot;MediaUrl&quot;:&quot;https://stqacus403789.blob.core.windows.net/qacontainer/70f5cd6f-7b37-4150-923f-245127a933fa&quot;}],
		&quot;EducationalTags&quot;:{
			&quot;AgeGroup&quot;:&quot;Non-Mobile Infants&quot;
			}
		}
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="beanstalkid" elementType="Header">
                      <stringProp name="Header.name">beanstalkid</stringProp>
                      <stringProp name="Header.value">F4A068D7-E74C-EC11-9820-501AC5358CAE</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="872529188">{&quot;data&quot;:{&quot;createPost&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL-CreatePost  upload image" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createPost&quot;,&quot;variables&quot;:{&quot;post&quot;:{&quot;ChildIds&quot;:&quot;${CheckedInChildId}&quot;,&quot;PostedBy&quot;:&quot;${CheckedInStaffId}&quot;,&quot;ClassId&quot;:&quot;${ClassId}&quot;,&quot;SchoolId&quot;:&quot;${SchoolId}&quot;,&quot;PostType&quot;:&quot;Activity&quot;,&quot;Text&quot;:&quot;Check this out!&quot;,&quot;Media&quot;:[{&quot;MediaType&quot;:&quot;photo&quot;,&quot;MediaUrl&quot;:&quot;https://stqacus403789.blob.core.windows.net/qacontainer/f9f8cce0-d227-4571-b6a2-099212071267&quot;},{&quot;MediaType&quot;:&quot;photo&quot;,&quot;MediaUrl&quot;:&quot;https://stqacus403789.blob.core.windows.net/qacontainer/166031e2-2fca-4396-b6a9-b7727899930a&quot;}],&quot;EducationalTags&quot;:{&quot;AgeGroup&quot;:&quot;Non-Mobile Infants&quot;}}},&quot;query&quot;:&quot;mutation createPost($post: CreatePostDto!) {\n  createPost(createPostDto: $post) {\n    PostedBy\n    ChildId\n    _id\n    RelatedPostId\n    SchoolId\n    PostedDate\n    ClassId\n    PostType\n    PostDetails {\n      ... on SleepPostDetail {\n        SleepStartTime\n        SleepEndTime\n        __typename\n      }\n      ... on FoodPostDetail {\n        Food\n        DrinkOffered\n        Amount\n        MealTime\n        MealType\n        __typename\n      }\n      ... on PottyPostDetail {\n        PottyType {\n          Type\n          BMType\n          __typename\n        }\n        PottyTime\n        WokeUpWet\n        DiaperRash\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">createPost</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation createPost($post: CreatePostDto!) {
  createPost(createPostDto: $post) {
    PostedBy
    ChildId
    _id
    RelatedPostId
    SchoolId
    PostedDate
    ClassId
    PostType
    PostDetails {
      ... on SleepPostDetail {
        SleepStartTime
        SleepEndTime
        __typename
      }
      ... on FoodPostDetail {
        Food
        DrinkOffered
        Amount
        MealTime
        MealType
        __typename
      }
      ... on PottyPostDetail {
        PottyType {
          Type
          BMType
          __typename
        }
        PottyTime
        WokeUpWet
        DiaperRash
        __typename
      }
      __typename
    }
    __typename
  }
}

</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;post&quot;: {
        &quot;ChildIds&quot;: &quot;${CheckedInChildId}&quot;,
        &quot;PostedBy&quot;: &quot;${CheckedInStaffId}&quot;,
        &quot;ClassId&quot;: &quot;${ClassId}&quot;,
        &quot;SchoolId&quot;: &quot;${SchoolId}&quot;,
        &quot;PostType&quot;:&quot;Activity&quot;,
        &quot;Text&quot;:&quot;Check this out!&quot;,
        &quot;Media&quot;:[{&quot;MediaType&quot;:&quot;photo&quot;,
	  &quot;MediaUrl&quot;:&quot;https://stqacus403789.blob.core.windows.net/qacontainer/f9f8cce0-d227-4571-b6a2-099212071267&quot;},
	 	{
	 	 	&quot;MediaType&quot;:&quot;photo&quot;,
	 	 	&quot;MediaUrl&quot;:&quot;https://stqacus403789.blob.core.windows.net/qacontainer/166031e2-2fca-4396-b6a9-b7727899930a&quot;}
	 	 	],
        	&quot;EducationalTags&quot;:{
 	      &quot;AgeGroup&quot;: &quot;Non-Mobile Infants&quot;
         }
        }
        
       }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="beanstalkid" elementType="Header">
                      <stringProp name="Header.name">beanstalkid</stringProp>
                      <stringProp name="Header.value">F4A068D7-E74C-EC11-9820-501AC5358CAE</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="872529188">{&quot;data&quot;:{&quot;createPost&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL-findTeacherFeed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findTeacherFeed&quot;,&quot;variables&quot;:{&quot;staffId&quot;:&quot;${CheckedInStaffId}&quot;,&quot;classId&quot;:&quot;${ClassId}&quot;,&quot;includeDeleted&quot;:false},&quot;query&quot;:&quot;query findTeacherFeed($staffId: String!, $childIds: [String!], $classId: String!, $startingPost: String, $includeDeleted: Boolean) {\n  findAllPosts(\n    queryAllPostsDto: {StaffId: $staffId, ChildIds: $childIds, ClassId: $classId, NumberPerPage: 20, Direction: Next, StartId: $startingPost, IsDeleteMode: $includeDeleted}\n  ) {\n    ...ActivityFeedPost\n    __typename\n  }\n}\n\nfragment ActivityFeedPost on ExtendedPostDetails {\n  _id\n  AllCareCircles {\n    ...ChildBasic\n    __typename\n  }\n  Child {\n    ...ChildBasic\n    __typename\n  }\n  ChildId\n  Class {\n    ClassId\n    ClassName\n    __typename\n  }\n  Comments {\n    _id\n    CommentByUserObject {\n      ContactId\n      FirstName\n      LastName\n      PhotoUrl\n      __typename\n    }\n    CommentDate\n    CommentText\n    SoftDelete\n    SoftDeleteDate\n    SoftDeleteBy\n    PostId\n    __typename\n  }\n  EducationalTags {\n    Scales {\n      Scale\n      Indicators\n      __typename\n    }\n    ReflectingOurCommunities {\n      BigIdea\n      Activity\n      __typename\n    }\n    AgeGroup\n    ActivityTypes\n    CoreMe\n    __typename\n  }\n  Media {\n    MediaType\n    MediaUrl\n    __typename\n  }\n  PostDetails {\n    __typename\n    ... on FoodPostDetail {\n      MealTime\n      Bottle {\n        Amount\n        BottleType\n        __typename\n      }\n      MealType\n      Food\n      Amount\n      DrinkOffered\n      __typename\n    }\n    ... on PottyPostDetail {\n      PottyTime\n      PottyType {\n        Type\n        BMType\n        __typename\n      }\n      Location\n      WokeUpWet\n      SoiledClothes\n      DiaperRash\n      Notes\n      __typename\n    }\n    ... on SleepPostDetail {\n      SleepStartTime\n      SleepEndTime\n      RestedOnly\n      __typename\n    }\n    ... on LessonPlanPostDetail {\n      LessonPlanWeek\n      __typename\n    }\n  }\n  PostedByUserObject {\n    ...StaffBasic\n    __typename\n  }\n  PostedDate\n  PostType\n  StaffList {\n    ...StaffBasic\n    __typename\n  }\n  Text\n  TransferredFrom {\n    ClassId\n    ClassName\n    __typename\n  }\n  Reactions {\n    CurrentUserReacted\n    Count\n    ReactionType\n    __typename\n  }\n  RelatedPostId\n  SoftDelete\n  SoftDeleteDate\n  SoftDeleteBy\n  ChildSchoolStatus\n  __typename\n}\n\nfragment ChildBasic on Child {\n  ChildId\n  FirstName\n  LastName\n  PhotoUrl\n  __typename\n}\n\nfragment StaffBasic on Staff {\n  StaffId\n  FirstName\n  LastName\n  PhotoUrl\n  __typename\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">findTeacherFeed</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query findTeacherFeed($staffId: String!, $childIds: [String!], $classId: String!, $startingPost: String, $includeDeleted: Boolean) {
  findAllPosts(
    queryAllPostsDto: {StaffId: $staffId, ChildIds: $childIds, ClassId: $classId, NumberPerPage: 20, Direction: Next, StartId: $startingPost, IsDeleteMode: $includeDeleted}
  ) {
    ...ActivityFeedPost
    __typename
  }
}

fragment ActivityFeedPost on ExtendedPostDetails {
  _id
  AllCareCircles {
    ...ChildBasic
    __typename
  }
  Child {
    ...ChildBasic
    __typename
  }
  ChildId
  Class {
    ClassId
    ClassName
    __typename
  }
  Comments {
    _id
    CommentByUserObject {
      ContactId
      FirstName
      LastName
      PhotoUrl
      __typename
    }
    CommentDate
    CommentText
    SoftDelete
    SoftDeleteDate
    SoftDeleteBy
    PostId
    __typename
  }
  EducationalTags {
    Scales {
      Scale
      Indicators
      __typename
    }
    ReflectingOurCommunities {
      BigIdea
      Activity
      __typename
    }
    AgeGroup
    ActivityTypes
    CoreMe
    __typename
  }
  Media {
    MediaType
    MediaUrl
    __typename
  }
  PostDetails {
    __typename
    ... on FoodPostDetail {
      MealTime
      Bottle {
        Amount
        BottleType
        __typename
      }
      MealType
      Food
      Amount
      DrinkOffered
      __typename
    }
    ... on PottyPostDetail {
      PottyTime
      PottyType {
        Type
        BMType
        __typename
      }
      Location
      WokeUpWet
      SoiledClothes
      DiaperRash
      Notes
      __typename
    }
    ... on SleepPostDetail {
      SleepStartTime
      SleepEndTime
      RestedOnly
      __typename
    }
    ... on LessonPlanPostDetail {
      LessonPlanWeek
      __typename
    }
  }
  PostedByUserObject {
    ...StaffBasic
    __typename
  }
  PostedDate
  PostType
  StaffList {
    ...StaffBasic
    __typename
  }
  Text
  TransferredFrom {
    ClassId
    ClassName
    __typename
  }
  Reactions {
    CurrentUserReacted
    Count
    ReactionType
    __typename
  }
  RelatedPostId
  SoftDelete
  SoftDeleteDate
  SoftDeleteBy
  ChildSchoolStatus
  __typename
}

fragment ChildBasic on Child {
  ChildId
  FirstName
  LastName
  PhotoUrl
  __typename
}

fragment StaffBasic on Staff {
  StaffId
  FirstName
  LastName
  PhotoUrl
  __typename
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
&quot;staffId&quot;:&quot;${CheckedInStaffId}&quot;,
&quot;classId&quot;:&quot;${ClassId}&quot;,
&quot;includeDeleted&quot;:false
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-759959245">{&quot;data&quot;:{&quot;findAllPosts&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="ReadNotes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;updateChildNoteReadAtStatus&quot;,&quot;variables&quot;:{&quot;childNoteId&quot;:&quot;${childNoteId}&quot;,&quot;classId&quot;:&quot;${ClassId}&quot;,&quot;staffId&quot;:&quot;${CheckedInStaffId}&quot;,&quot;noteRead&quot;:true},&quot;query&quot;:&quot;mutation updateChildNoteReadAtStatus($childNoteId: String!,$classId: String!, $staffId: String!, $noteRead: Boolean) {\n  updateChildNoteReadAtStatus(\n    updateChildNoteDto: {ChildNoteId: $childNoteId,ClassId: $classId, StaffId: $staffId, NoteRead: $noteRead}\n  ) {\n    ChildNoteId\n    ChildId\n    Note\n    CreatedDate\n    UpdateDate\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">updateChildNoteReadAtStatus</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation updateChildNoteReadAtStatus($childNoteId: String!,$classId: String!, $staffId: String!, $noteRead: Boolean) {
  updateChildNoteReadAtStatus(
    updateChildNoteDto: {ChildNoteId: $childNoteId,ClassId: $classId, StaffId: $staffId, NoteRead: $noteRead}
  ) {
    ChildNoteId
    ChildId
    Note
    CreatedDate
    UpdateDate
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{&quot;childNoteId&quot;:&quot;${childNoteId}&quot;,&quot;classId&quot;:&quot;${ClassId}&quot;,&quot;staffId&quot;:&quot;${CheckedInStaffId}&quot;,&quot;noteRead&quot;:true}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1551834288">{&quot;data&quot;:{&quot;updateChildNoteReadAtStatus</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Check Out Child" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;checkOutChild&quot;,&quot;variables&quot;:{&quot;childAttendanceId&quot;:&quot;${ChildAttendanceId}&quot;,&quot;staffId&quot;:&quot;${CheckedInStaffId}&quot;},&quot;query&quot;:&quot;mutation checkOutChild($childAttendanceId: String!, $staffId: String!) {\n  checkOutChild(ChildAttendanceId: $childAttendanceId, StaffId: $staffId) {\n    ChildAttendanceId\n    ChildId\n    ClassId\n    CheckInDateTime\n    CheckOutDateTime\n    CheckInById\n    CheckOutById\n    CreatedBy\n    UpdatedBy\n    CreatedDate\n    UpdatedDate\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">checkOutChild</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation checkOutChild($childAttendanceId: String!, $staffId: String!) {
  checkOutChild(ChildAttendanceId: $childAttendanceId, StaffId: $staffId) {
    ChildAttendanceId
    ChildId
    ClassId
    CheckInDateTime
    CheckOutDateTime
    CheckInById
    CheckOutById
    CreatedBy
    UpdatedBy
    CreatedDate
    UpdatedDate
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{&quot;childAttendanceId&quot;:&quot;${ChildAttendanceId}&quot;,&quot;staffId&quot;:&quot;${CheckedInStaffId}&quot;}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="beanstalkid" elementType="Header">
                      <stringProp name="Header.name">beanstalkid</stringProp>
                      <stringProp name="Header.value">F4A068D7-E74C-EC11-9820-501AC5358CAE</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1839313826">{&quot;data&quot;:{&quot;checkOutChild&quot;:</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Check Out Staff" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;checkOutStaff&quot;,&quot;variables&quot;:{&quot;staffClassId&quot;:&quot;${StaffClassId}&quot;},&quot;query&quot;:&quot;mutation checkOutStaff($staffClassId: String!) {\n  checkOutStaff(StaffClassId: $staffClassId) {\n    StaffClassId\n    StaffId\n    ClassId\n    CheckInDateTime\n    CheckOutDateTime\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">checkOutStaff</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation checkOutStaff($staffClassId: String!) {
  checkOutStaff(StaffClassId: $staffClassId) {
    StaffClassId
    StaffId
    ClassId
    CheckInDateTime
    CheckOutDateTime
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;staffClassId&quot;:&quot;${StaffClassId}&quot;}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="beanstalkid" elementType="Header">
                    <stringProp name="Header.name">beanstalkid</stringProp>
                    <stringProp name="Header.value">3CB2CC36-646F-EC11-94F6-501AC51FD712</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-188171998">{&quot;data&quot;:{&quot;checkOutStaff&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Find All Staff Checked Into Classroom" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findAllStaffCheckedIntoClassroom&quot;,&quot;variables&quot;:{&quot;classId&quot;:&quot;${ClassId}&quot;},&quot;query&quot;:&quot;query findAllStaffCheckedIntoClassroom($classId: String!) {\n  findAllStaffCheckedIntoClassroom(ClassId: $classId) {\n    StaffId\n    FirstName\n    LastName\n    PhotoUrl\n    StaffType\n    SchoolId\n    SchoolName\n    ExternalStaffId\n    JobCodeDescription\n    Active\n    Tenure\n    AcceptedTerms\n    CurrentClassName\n    CurrentClassId\n    Status\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">findAllStaffCheckedIntoClassroom</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query findAllStaffCheckedIntoClassroom($classId: String!) {
  findAllStaffCheckedIntoClassroom(ClassId: $classId) {
    StaffId
    FirstName
    LastName
    PhotoUrl
    StaffType
    SchoolId
    SchoolName
    ExternalStaffId
    JobCodeDescription
    Active
    Tenure
    AcceptedTerms
    CurrentClassName
    CurrentClassId
    Status
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;classId&quot;:&quot;${ClassId}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments"> - ${__threadNum}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-85974644">{&quot;data&quot;:{&quot;findAllStaffCheckedIntoClassroom&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Find School Profile - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findSchoolProfile&quot;,&quot;query&quot;:&quot;query findSchoolProfile {\n  findSchoolProfile(SchoolId: \&quot;${SchoolId}\&quot;) {\n    SchoolId\n    Leadership\n    SchoolName\n    ExternalSchoolId\n    StreetAddress\n    StreetAddress2\n    City\n    State\n    ZipCode\n    PhoneNumber\n    Email\n    TaxId\n    DivisionName\n    RegionName\n    DistrictName\n    BrandName\n    BrandPhotos\n    SchoolSegment\n    LivestreamId\n    BrandPhotos\n    __typename\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">findSchoolProfile</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query findSchoolProfile {
  findSchoolProfile(SchoolId: &quot;${SchoolId}&quot;) {
    SchoolId
    Leadership
    SchoolName
    ExternalSchoolId
    StreetAddress
    StreetAddress2
    City
    State
    ZipCode
    PhoneNumber
    Email
    TaxId
    DivisionName
    RegionName
    DistrictName
    BrandName
    BrandPhotos
    SchoolSegment
    LivestreamId
    BrandPhotos
    __typename
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1543933348">{&quot;data&quot;:{&quot;findSchoolProfile&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - List School Staff - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;listSchoolStaff&quot;,&quot;query&quot;:&quot;query listSchoolStaff{\n  listSchoolStaff(ListSchoolStaffDto: {SchoolId: \&quot;${SchoolId}\&quot;}) {\n    StaffId\n    FirstName\n    LastName\n    PhotoUrl\n    StaffType\n    SchoolId\n    ExternalStaffId\n    SchoolName\n    JobCodeDescription\n    Active\n    Tenure\n    Schools {\n      SchoolId\n      SchoolName\n      __typename\n    }\n    CurrentClassName\n    CurrentClassId\n    Status\n    __typename\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">listSchoolStaff</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query listSchoolStaff{
  listSchoolStaff(ListSchoolStaffDto: {SchoolId: &quot;${SchoolId}&quot;}) {
    StaffId
    FirstName
    LastName
    PhotoUrl
    StaffType
    SchoolId
    ExternalStaffId
    SchoolName
    JobCodeDescription
    Active
    Tenure
    Schools {
      SchoolId
      SchoolName
      __typename
    }
    CurrentClassName
    CurrentClassId
    Status
    __typename
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="beanstalkid" elementType="Header">
                <stringProp name="Header.name">beanstalkid</stringProp>
                <stringProp name="Header.value">63E237E5-EF4C-EC11-9820-501AC5358CAE</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1696050410">{&quot;data&quot;:{&quot;listSchoolStaff&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Find One School Record - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findOneSchoolRecord&quot;,&quot;query&quot;:&quot;query findOneSchoolRecord {\n  findOneSchoolRecord(SchoolId: \&quot;${SchoolId}\&quot;) {\n    Leadership\n    BrandPhotos\n    SchoolId\n    SchoolName\n    SchoolNameShort\n    ExternalSchoolId\n    StreetAddress\n    StreetAddress2\n    City\n    State\n    ZipCode\n    PhoneNumber\n    Email\n    TaxId\n    BrandName\n    ExternalBrandId\n    DistrictName\n    DistrictNameShort\n    RegionName\n    RegionNameShort\n    DivisionName\n    DivisionNameShort\n    SchoolSegment\n    Livestream\n    LivestreamId\n    TimeZone\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">findOneSchoolRecord</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query findOneSchoolRecord {
  findOneSchoolRecord(SchoolId: &quot;${SchoolId}&quot;) {
    Leadership
    BrandPhotos
    SchoolId
    SchoolName
    SchoolNameShort
    ExternalSchoolId
    StreetAddress
    StreetAddress2
    City
    State
    ZipCode
    PhoneNumber
    Email
    TaxId
    BrandName
    ExternalBrandId
    DistrictName
    DistrictNameShort
    RegionName
    RegionNameShort
    DivisionName
    DivisionNameShort
    SchoolSegment
    Livestream
    LivestreamId
    TimeZone
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="beanstalkid" elementType="Header">
                <stringProp name="Header.name">beanstalkid</stringProp>
                <stringProp name="Header.value">F4A068D7-E74C-EC11-9820-501AC5358CAE</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1118140730">{&quot;data&quot;:{&quot;findOneSchoolRecord&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Find One Child- HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findOneChild&quot;,&quot;query&quot;:&quot;query findOneChild {\n  findOneChild(\nChildId: \&quot;${ChildId}\&quot;\n)\n  { \n    ChildId\n    FirstName\n    LastName\n    ExternalChildId\n    DOB\n    Holidays\n    Schools{\n      SchoolId\n    }\n    ChildContacts{\n      ContactId\n      Email\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">findOneChild</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query findOneChild {
  findOneChild(
ChildId: &quot;${ChildId}&quot;
)
  { 
    ChildId
    FirstName
    LastName
    ExternalChildId
    DOB
    Holidays
    Schools{
      SchoolId
    }
    ChildContacts{
      ContactId
      Email
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="beanstalkid" elementType="Header">
                <stringProp name="Header.name">beanstalkid</stringProp>
                <stringProp name="Header.value">F4A068D7-E74C-EC11-9820-501AC5358CAE</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1008398377">{&quot;data&quot;:{&quot;findOneChild&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Find All Children By School - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findAllChildrenBySchool&quot;,&quot;variables&quot;:{&quot;schoolId&quot;:&quot;${SchoolId}&quot;,&quot;includeWithdrawnChildren&quot;:false},&quot;query&quot;:&quot;query findAllChildrenBySchool($schoolId: String!, $includeWithdrawnChildren: Boolean) {\n  findAllChildrenBySchool(\n    SchoolId: $schoolId\n    IncludeWithdrawnChildren: $includeWithdrawnChildren\n  ) {\n    ChildId\n    FirstName\n    LastName\n    ExternalChildId\n    DOB\n    PreferredName\n    About\n    Holidays\n    Pronouns\n    PhotoUrl\n    Active\n    ChildSchoolStatus\n    Classes {\n      ClassId\n      ClassName\n      __typename\n    }\n    Schools {\n      SchoolId\n      SchoolName\n      __typename\n    }\n    ChildContacts {\n      Relationship\n      ContactId\n      ContactType\n      ContactFirstName\n      ContactLastName\n      __typename\n    }\n    ChildNotes {\n      ChildNoteId\n      ChildId\n      NoteType\n      Note\n      DifferentDropOffPickUpTime\n      ExpirationDate\n      NoteRead\n      CreatedBy\n      UpdatedBy\n      CreatedDate\n      UpdatedDate\n      CreatedByFirstName\n      CreatedByLastName\n      UpdatedByFirstName\n      UpdatedByLastName\n      __typename\n    }\n    CheckInInfo {\n      ChildId\n      ChildFirstName\n      ChildLastName\n      CurrentClassCheckedInto\n      Status\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">findAllChildrenBySchool</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query findAllChildrenBySchool($schoolId: String!, $includeWithdrawnChildren: Boolean) {
  findAllChildrenBySchool(
    SchoolId: $schoolId
    IncludeWithdrawnChildren: $includeWithdrawnChildren
  ) {
    ChildId
    FirstName
    LastName
    ExternalChildId
    DOB
    PreferredName
    About
    Holidays
    Pronouns
    PhotoUrl
    Active
    ChildSchoolStatus
    Classes {
      ClassId
      ClassName
      __typename
    }
    Schools {
      SchoolId
      SchoolName
      __typename
    }
    ChildContacts {
      Relationship
      ContactId
      ContactType
      ContactFirstName
      ContactLastName
      __typename
    }
    ChildNotes {
      ChildNoteId
      ChildId
      NoteType
      Note
      DifferentDropOffPickUpTime
      ExpirationDate
      NoteRead
      CreatedBy
      UpdatedBy
      CreatedDate
      UpdatedDate
      CreatedByFirstName
      CreatedByLastName
      UpdatedByFirstName
      UpdatedByLastName
      __typename
    }
    CheckInInfo {
      ChildId
      ChildFirstName
      ChildLastName
      CurrentClassCheckedInto
      Status
      __typename
    }
    __typename
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{&quot;schoolId&quot;:&quot;${SchoolId}&quot;,&quot;includeWithdrawnChildren&quot;:false}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">ChildId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.findAllChildrenBySchool[0].ChildId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="beanstalkid" elementType="Header">
                <stringProp name="Header.name">beanstalkid</stringProp>
                <stringProp name="Header.value">63E237E5-EF4C-EC11-9820-501AC5358CAE</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="34405594">{&quot;data&quot;:{&quot;findAllChildrenBySchool&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Admin Is School WMG Enabled - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;isSchoolWMGEnabled&quot;,&quot;query&quot;:&quot;query isSchoolWMGEnabled {\n  isSchoolWMGEnabled(SchoolId:\&quot;${SchoolId}\&quot;)\n  {\n    LivestreamId\n    WMGEnabled\n    __typename\n    \n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">isSchoolWMGEnabled</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query isSchoolWMGEnabled {
  isSchoolWMGEnabled(SchoolId:&quot;${SchoolId}&quot;)
  {
    LivestreamId
    WMGEnabled
    __typename
    
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="231502454">{&quot;data&quot;:{&quot;isSchoolWMGEnabled&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL - Create SAS Params - HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createSASParams&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation createSASParams {\n  createSASParams {\n    ContainerUrl\n    NewAssetId\n    SASQueryParams\n    __typename\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${GRAPHQL_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/service/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">createSASParams</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation createSASParams {
  createSASParams {
    ContainerUrl
    NewAssetId
    SASQueryParams
    __typename
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(var)}</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-IN,en-GB;q=0.9,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="beanstalkid" elementType="Header">
                <stringProp name="Header.name">beanstalkid</stringProp>
                <stringProp name="Header.value">63E237E5-EF4C-EC11-9820-501AC5358CAE</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Beanstalk/2 CFNetwork/1325.0.1 Darwin/21.1.0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="83922615">{&quot;data&quot;:{&quot;createSASParams&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
